-- start_ignore
--
-- Greenplum DB backup test
--
-- Check database version and pg_dump
select version();
                                                                                                                    version                                                                                                                    
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 PostgreSQL 8.2.4 (Greenplum Database cvs Head build dev build ) on i386-apple-darwin8.9.1, compiled by GCC i686-apple-darwin8-gcc-4.0.1 (GCC) 4.0.1 (Apple Computer, Inc. build 5367) compiled on Jun 17 2007 10:44:13 (with assert checking)
(1 row)

\! pg_dump --version
pg_dump (PostgreSQL) 8.2.4
\echo Test pg_dump
Test pg_dump
\! rm -fr /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype
\! mkdir /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype
\! pg_dump -Fc -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc regressbkuptest1
\! pg_dump -Fp -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fp regressbkuptest1
\! pg_dump -Ft -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_ft regressbkuptest1
\! pg_dump -Fc -Z5 -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_Z regressbkuptest1
\! pg_dump -Fc -a -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_data regressbkuptest1
\! pg_dump -Fc -s -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_schema regressbkuptest1
\! pg_dump -Fc -b -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_blobs regressbkuptest1
\! pg_dump -Fc -C -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_create regressbkuptest1
-- NOT YET SUPPORTED
-- \! pg_dump -Fc -D -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_ins regressbkuptest1
\! pg_dump -Fc -E Unicode -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_enc regressbkuptest1
\! pg_dump -Fc -n s6 -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_s6 regressbkuptest1
\! pg_dump -Fc -N s6 -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_nos6 regressbkuptest1
\! pg_dump -Fc -t t1 -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_t1 regressbkuptest1
\! pg_dump -Fc -T t1 -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_not1 regressbkuptest1
\! pg_dump -Fc -o -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_oid regressbkuptest1
\! pg_dump -Fc -O -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_noowner regressbkuptest1
\! pg_dump -Fc -x -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_nopriv regressbkuptest1
\! pg_dump -Fc --disable-dollar-quoting -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_sqlquote regressbkuptest1
\! pg_dump -Fc --gp-syntax -f /Users/ftian/work/crashburn/cdb2/cdb-pg/src/test/regress/results/pgdump_datatype/regressbkuptest1_fc_gpsyntax regressbkuptest1
-- end_ignore
-- test pg_dumpall.  Use diff to check
\! pg_dumpall -g -r | sed s/`whoami`/__USER_LOGIN__/g 

BugBug: Jira 1606.

pg_dumpall: query failed: ERROR:  syntax error at or near "("
LINE 1: ...shobj_description(oid, 'pg_authid') as rolcomment (SELECT rs...
                                                             ^
pg_dumpall: query was: SELECT rolname, rolsuper, rolinherit, rolcreaterole, rolcreatedb, rolcatupdate, rolcanlogin, rolconnlimit, rolpassword, rolvaliduntil, pg_catalog.shobj_description(oid, 'pg_authid') as rolcomment (SELECT rsqname FROM pg_resqueue WHERE pg_resqueue.oid = rolresqueue) AS rolqueuename FROM pg_authid ORDER BY 1
--
-- Greenplum Database cluster dump
--

\connect postgres

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET escape_string_warning = 'off';



\! pg_dumpall -D | sed s/`whoami`/__USER_LOGIN__/g 
--
-- Greenplum Database cluster dump
--

\connect postgres

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET escape_string_warning = 'off';

--
-- Roles
--

CREATE ROLE __USER_LOGIN__;
ALTER ROLE __USER_LOGIN__ WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN PASSWORD 'md5eace0363bf527b339f60afbcb5b3b018';
CREATE ROLE luser;
ALTER ROLE luser WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN;






--
-- Database creation
--

CREATE DATABASE regressbkuptest1 WITH TEMPLATE = template0 OWNER = __USER_LOGIN__ ENCODING = 'UTF8';
CREATE DATABASE regression WITH TEMPLATE = template0 OWNER = __USER_LOGIN__ ENCODING = 'SQL_ASCII';
ALTER DATABASE regression SET lc_messages TO 'C';
ALTER DATABASE regression SET lc_monetary TO 'C';
ALTER DATABASE regression SET lc_numeric TO 'C';
ALTER DATABASE regression SET lc_time TO 'C';
ALTER DATABASE regression SET timezone_abbreviations TO 'Default';
CREATE DATABASE regressrestoretestadv3 WITH TEMPLATE = template0 OWNER = __USER_LOGIN__ ENCODING = 'UTF8';
REVOKE ALL ON DATABASE template1 FROM PUBLIC;
REVOKE ALL ON DATABASE template1 FROM __USER_LOGIN__;
GRANT ALL ON DATABASE template1 TO __USER_LOGIN__;
GRANT CONNECT ON DATABASE template1 TO PUBLIC;


\connect postgres

--
-- Greenplum Database database dump
--

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: public; Type: ACL; Schema: -; Owner: __USER_LOGIN__
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Greenplum Database database dump complete
--

\connect regressbkuptest1

--
-- Greenplum Database database dump
--

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: s6; Type: SCHEMA; Schema: -; Owner: __USER_LOGIN__
--

CREATE SCHEMA s6;


ALTER SCHEMA s6 OWNER TO __USER_LOGIN__;

SET search_path = public, pg_catalog;

--
-- Name: complex; Type: TYPE; Schema: public; Owner: __USER_LOGIN__
--

CREATE TYPE complex AS (
	r real,
	i real
);


ALTER TYPE public.complex OWNER TO __USER_LOGIN__;

--
-- Name: comptype; Type: TYPE; Schema: public; Owner: __USER_LOGIN__
--

CREATE TYPE comptype AS (
	name text,
	price numeric
);


ALTER TYPE public.comptype OWNER TO __USER_LOGIN__;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: t1; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t1 (
    i integer,
    si smallint,
    bi bigint,
    de numeric,
    n numeric,
    n103 numeric(10,3),
    r real,
    dou double precision
);


ALTER TABLE public.t1 OWNER TO __USER_LOGIN__;

--
-- Name: t10; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t10 (
    j integer
);


ALTER TABLE public.t10 OWNER TO __USER_LOGIN__;

--
-- Name: t2; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t2 (
    i integer,
    s integer NOT NULL,
    bs bigint NOT NULL
);


ALTER TABLE public.t2 OWNER TO __USER_LOGIN__;

--
-- Name: t2_bs_seq; Type: SEQUENCE; Schema: public; Owner: __USER_LOGIN__
--

CREATE SEQUENCE t2_bs_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.t2_bs_seq OWNER TO __USER_LOGIN__;

--
-- Name: t2_bs_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: __USER_LOGIN__
--

ALTER SEQUENCE t2_bs_seq OWNED BY t2.bs;


--
-- Name: t2_bs_seq; Type: SEQUENCE SET; Schema: public; Owner: __USER_LOGIN__
--

SELECT pg_catalog.setval('t2_bs_seq', 4, true);


--
-- Name: t2_s_seq; Type: SEQUENCE; Schema: public; Owner: __USER_LOGIN__
--

CREATE SEQUENCE t2_s_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.t2_s_seq OWNER TO __USER_LOGIN__;

--
-- Name: t2_s_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: __USER_LOGIN__
--

ALTER SEQUENCE t2_s_seq OWNED BY t2.s;


--
-- Name: t2_s_seq; Type: SEQUENCE SET; Schema: public; Owner: __USER_LOGIN__
--

SELECT pg_catalog.setval('t2_s_seq', 4, true);


--
-- Name: t3; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t3 (
    m money,
    c character(10),
    vc character varying(10),
    t text,
    ba bytea
);


ALTER TABLE public.t3 OWNER TO __USER_LOGIN__;

--
-- Name: t4; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t4 (
    t timestamp without time zone,
    t2 timestamp(2) without time zone,
    tz timestamp with time zone,
    tz3 timestamp(3) with time zone,
    i interval,
    d date,
    ti time without time zone,
    ti4 time(4) without time zone,
    tiz time with time zone,
    tiz5 time(5) with time zone
);


ALTER TABLE public.t4 OWNER TO __USER_LOGIN__;

--
-- Name: t5; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t5 (
    b boolean,
    pt point,
    ls lseg,
    p path,
    bo box,
    po polygon,
    c circle
);


ALTER TABLE public.t5 OWNER TO __USER_LOGIN__;

--
-- Name: t7; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t7 (
    b bit(3),
    bv bit varying(5),
    ia integer[],
    ta text[]
);


ALTER TABLE public.t7 OWNER TO __USER_LOGIN__;

--
-- Name: t8; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t8 (
    i integer,
    c complex,
    ct comptype
);


ALTER TABLE public.t8 OWNER TO __USER_LOGIN__;

SET default_with_oids = true;

--
-- Name: t9; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t9 (
    i integer
);


ALTER TABLE public.t9 OWNER TO __USER_LOGIN__;

SET search_path = s6, pg_catalog;

SET default_with_oids = false;

--
-- Name: t6; Type: TABLE; Schema: s6; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t6 (
    c cidr,
    i inet,
    m macaddr
);


ALTER TABLE s6.t6 OWNER TO __USER_LOGIN__;

SET search_path = public, pg_catalog;

--
-- Name: s; Type: DEFAULT; Schema: public; Owner: __USER_LOGIN__
--

ALTER TABLE t2 ALTER COLUMN s SET DEFAULT nextval('t2_s_seq'::regclass);


--
-- Name: bs; Type: DEFAULT; Schema: public; Owner: __USER_LOGIN__
--

ALTER TABLE t2 ALTER COLUMN bs SET DEFAULT nextval('t2_bs_seq'::regclass);


--
-- Data for Name: t1; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO t1 (i, si, bi, de, n, n103, r, dou) VALUES (1, 2, 3, 3.14, 3.1415, 3.142, 2.71, 2.71828);
INSERT INTO t1 (i, si, bi, de, n, n103, r, dou) VALUES (NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO t1 (i, si, bi, de, n, n103, r, dou) VALUES (2, 2, 2, 2.0, 2.0, 2.000, 'Infinity', 'NaN');
INSERT INTO t1 (i, si, bi, de, n, n103, r, dou) VALUES (-3, -2, -1, 1.4, 1.41, 1.414, 'NaN', '-Infinity');


--
-- Data for Name: t10; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO t10 (j) VALUES (3);
INSERT INTO t10 (j) VALUES (NULL);
INSERT INTO t10 (j) VALUES (4);


--
-- Data for Name: t2; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO t2 (i, s, bs) VALUES (1, 1, 1);
INSERT INTO t2 (i, s, bs) VALUES (3, 3, 3);
INSERT INTO t2 (i, s, bs) VALUES (1, 1, 1);
INSERT INTO t2 (i, s, bs) VALUES (2, 2, 2);
INSERT INTO t2 (i, s, bs) VALUES (4, 4, 4);
INSERT INTO t2 (i, s, bs) VALUES (4, 4, 4);


--
-- Data for Name: t3; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO t3 (m, c, vc, t, ba) VALUES ('$10.20', 'Simple    ', 'Simple VC', 'Text column', 'string as ba');
INSERT INTO t3 (m, c, vc, t, ba) VALUES ('$10.00', 'It''s OK   ', 'It''s OK', 'It''s still OK', 'It''s binary OK');
INSERT INTO t3 (m, c, vc, t, ba) VALUES ('$100.00', '	
v\\     ', '	
v\\', '	
v\\', '\\011\\015\\012v');
INSERT INTO t3 (m, c, vc, t, ba) VALUES ('$100.00', '          ', '', '', '');
INSERT INTO t3 (m, c, vc, t, ba) VALUES (NULL, NULL, NULL, NULL, NULL);
INSERT INTO t3 (m, c, vc, t, ba) VALUES ('-$3.00', '1234567890', '1234567890', 'Too long to test filling', '\\001\\000\\000\\002\\\\');


--
-- Data for Name: t4; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO t4 (t, t2, tz, tz3, i, d, ti, ti4, tiz, tiz5) VALUES ('1970-01-01 00:00:00', 'infinity', 'infinity', '-infinity', '00:00:00', '1970-01-01', '00:00:00', '00:00:00', '00:00:00+00', '00:00:00+00');
INSERT INTO t4 (t, t2, tz, tz3, i, d, ti, ti4, tiz, tiz5) VALUES (NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO t4 (t, t2, tz, tz3, i, d, ti, ti4, tiz, tiz5) VALUES ('1999-01-08 04:05:06', '1999-01-08 04:05:06.23', '1999-01-07 18:05:06-08', '1999-01-08 04:05:06.23-08', '1 day 12:34:56', '1999-01-08', '04:05:06', '00:00:00', '00:01:02-08', '00:01:00-02');


--
-- Data for Name: t5; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO t5 (b, pt, ls, p, bo, po, c) VALUES (true, '(1,2)', '[(1,2),(0,0)]', '((1,1),(2,2),(3,3))', '(2,2),(1,1)', '((1,0),(1,1),(2,2))', '<(0,1),4>');
INSERT INTO t5 (b, pt, ls, p, bo, po, c) VALUES (NULL, NULL, NULL, NULL, NULL, NULL, NULL);
INSERT INTO t5 (b, pt, ls, p, bo, po, c) VALUES (false, '(1,2)', '[(1,2),(0,0)]', '((1,1),(2,2),(3,3),(4,4))', '(2,2),(1,1)', '((1,0),(1,1),(2,2))', '<(0,2),43>');


--
-- Data for Name: t7; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO t7 (b, bv, ia, ta) VALUES (NULL, NULL, NULL, NULL);
INSERT INTO t7 (b, bv, ia, ta) VALUES (B'101', B'00101', '{1,2,3}', '{{Hello,world},{from,Mars}}');
INSERT INTO t7 (b, bv, ia, ta) VALUES (B'000', B'00', '{4,5}', '{{"",""},{"",""}}');
INSERT INTO t7 (b, bv, ia, ta) VALUES (B'111', B'', '{}', '{{1,2},{3,4},{5,6}}');


--
-- Data for Name: t8; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO t8 (i, c, ct) VALUES (1, '(1,2)', '(Hello,8.3)');
INSERT INTO t8 (i, c, ct) VALUES (1, '(0,0)', '("",)');
INSERT INTO t8 (i, c, ct) VALUES (NULL, NULL, NULL);
INSERT INTO t8 (i, c, ct) VALUES (2, '(,-1)', '(,)');


--
-- Data for Name: t9; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO t9 (i) VALUES (1);
INSERT INTO t9 (i) VALUES (NULL);
INSERT INTO t9 (i) VALUES (2);


SET search_path = s6, pg_catalog;

--
-- Data for Name: t6; Type: TABLE DATA; Schema: s6; Owner: __USER_LOGIN__
--

INSERT INTO t6 (c, i, m) VALUES (NULL, NULL, NULL);
INSERT INTO t6 (c, i, m) VALUES ('127.0.0.1/32', '2001:4f8:3:ba::/64', '08:02:0b:02:ac:e3');


--
-- Name: public; Type: ACL; Schema: -; Owner: __USER_LOGIN__
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Greenplum Database database dump complete
--

\connect regression

--
-- Greenplum Database database dump
--

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: __USER_LOGIN__
--

CREATE PROCEDURAL LANGUAGE plpgsql;


--
-- Name: public; Type: ACL; Schema: -; Owner: __USER_LOGIN__
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Greenplum Database database dump complete
--

\connect regressrestoretestadv3

--
-- Greenplum Database database dump
--

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: __USER_LOGIN__
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = public, pg_catalog;

--
-- Name: us_postal_code; Type: DOMAIN; Schema: public; Owner: __USER_LOGIN__
--

CREATE DOMAIN us_postal_code AS text
	CONSTRAINT us_postal_code_check CHECK (((VALUE ~ '^\\d{5}$'::text) OR (VALUE ~ '^\\d{5}-\\d{4}$'::text)));


ALTER DOMAIN public.us_postal_code OWNER TO __USER_LOGIN__;

--
-- Name: c3tobit(character); Type: FUNCTION; Schema: public; Owner: __USER_LOGIN__
--

CREATE FUNCTION c3tobit(s character) RETURNS bit
    AS $$ select '101'::bit(3); $$
    LANGUAGE sql IMMUTABLE STRICT;


ALTER FUNCTION public.c3tobit(s character) OWNER TO __USER_LOGIN__;

--
-- Name: incr(integer); Type: FUNCTION; Schema: public; Owner: __USER_LOGIN__
--

CREATE FUNCTION incr(i integer) RETURNS integer
    AS $$
	BEGIN 
		return i + 1;
	END
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.incr(i integer) OWNER TO __USER_LOGIN__;

--
-- Name: trigf(); Type: FUNCTION; Schema: public; Owner: __USER_LOGIN__
--

CREATE FUNCTION trigf() RETURNS "trigger"
    AS $$
	BEGIN
		insert into trig1 values (1, 1);
	END
	$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.trigf() OWNER TO __USER_LOGIN__;

SET search_path = pg_catalog;

--
-- Name: CAST (character AS bit); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (character AS bit) WITH FUNCTION public.c3tobit(character);


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: idxt; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE idxt (
    i integer,
    j integer
);


ALTER TABLE public.idxt OWNER TO __USER_LOGIN__;

SET default_with_oids = true;

--
-- Name: oidt; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE oidt (
    i integer,
    j integer
);


ALTER TABLE public.oidt OWNER TO __USER_LOGIN__;

SET default_with_oids = false;

--
-- Name: rt; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE rt (
    i integer,
    j integer
);


ALTER TABLE public.rt OWNER TO __USER_LOGIN__;

--
-- Name: seq; Type: SEQUENCE; Schema: public; Owner: __USER_LOGIN__
--

CREATE SEQUENCE seq
    INCREMENT BY 10
    NO MAXVALUE
    MINVALUE 100
    CACHE 10;


ALTER TABLE public.seq OWNER TO __USER_LOGIN__;

--
-- Name: seq; Type: SEQUENCE SET; Schema: public; Owner: __USER_LOGIN__
--

SELECT pg_catalog.setval('seq', 190, true);


--
-- Name: t1; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t1 (
    i integer NOT NULL,
    j integer NOT NULL,
    k integer,
    CONSTRAINT t1_check CHECK ((j >= i))
);


ALTER TABLE public.t1 OWNER TO __USER_LOGIN__;

--
-- Name: trig1; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE trig1 (
    i integer,
    j integer
);


ALTER TABLE public.trig1 OWNER TO __USER_LOGIN__;

--
-- Name: tt1; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE tt1 (
    i integer,
    j integer,
    upc us_postal_code
);


ALTER TABLE public.tt1 OWNER TO __USER_LOGIN__;

--
-- Name: tt2; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE tt2 (
    state character(2)
)
INHERITS (tt1);


ALTER TABLE public.tt2 OWNER TO __USER_LOGIN__;

--
-- Name: v1; Type: VIEW; Schema: public; Owner: __USER_LOGIN__
--

CREATE VIEW v1 AS
    SELECT t1.i, t1.j, t1.k FROM t1 WHERE (t1.i = t1.j);


ALTER TABLE public.v1 OWNER TO __USER_LOGIN__;

--
-- Data for Name: idxt; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--



--
-- Data for Name: oidt; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO oidt (i, j) VALUES (1, 2);
INSERT INTO oidt (i, j) VALUES (3, 4);


--
-- Data for Name: rt; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO rt (i, j) VALUES (1, 1);


--
-- Data for Name: t1; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO t1 (i, j, k) VALUES (1, 1, 1);
INSERT INTO t1 (i, j, k) VALUES (3, 4, NULL);
INSERT INTO t1 (i, j, k) VALUES (2, 2, 2);


--
-- Data for Name: trig1; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO trig1 (i, j) VALUES (1, 1);
INSERT INTO trig1 (i, j) VALUES (2, 2);


--
-- Data for Name: tt1; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO tt1 (i, j, upc) VALUES (1, 1, '53706');
INSERT INTO tt1 (i, j, upc) VALUES (3, 1, '55555-4444');
INSERT INTO tt1 (i, j, upc) VALUES (2, 1, '90210');


--
-- Data for Name: tt2; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

INSERT INTO tt2 (i, j, upc, state) VALUES (4, 4, '94041', 'CA');


--
-- Name: t1_pkey; Type: CONSTRAINT; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

ALTER TABLE ONLY t1
    ADD CONSTRAINT t1_pkey PRIMARY KEY (i);


--
-- Name: idxt1; Type: INDEX; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE INDEX idxt1 ON idxt USING btree (i);


--
-- Name: idxt2; Type: INDEX; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE UNIQUE INDEX idxt2 ON idxt USING btree (j);


--
-- Name: insrt; Type: RULE; Schema: public; Owner: __USER_LOGIN__
--

CREATE RULE insrt AS ON INSERT TO rt DO INSTEAD UPDATE rt SET j = (rt.i + rt.j);


--
-- Name: nodelrt; Type: RULE; Schema: public; Owner: __USER_LOGIN__
--

CREATE RULE nodelrt AS ON DELETE TO rt DO INSTEAD NOTHING;


--
-- Name: trig; Type: TRIGGER; Schema: public; Owner: __USER_LOGIN__
--

CREATE TRIGGER trig
    AFTER DELETE ON trig1
    FOR EACH ROW
    EXECUTE PROCEDURE trigf();


--
-- Name: public; Type: ACL; Schema: -; Owner: __USER_LOGIN__
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Greenplum Database database dump complete
--

\connect template1

--
-- Greenplum Database database dump
--

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: template1; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON DATABASE template1 IS 'Default template database';


--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: public; Type: ACL; Schema: -; Owner: __USER_LOGIN__
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Greenplum Database database dump complete
--

--
-- Greenplum Database cluster dump complete
--

\! pg_dumpall --gp-syntax | sed s/`whoami`/__USER_LOGIN__/g 
--
-- Greenplum Database cluster dump
--

\connect postgres

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET escape_string_warning = 'off';

--
-- Roles
--

CREATE ROLE __USER_LOGIN__;
ALTER ROLE __USER_LOGIN__ WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN PASSWORD 'md5eace0363bf527b339f60afbcb5b3b018';
CREATE ROLE luser;
ALTER ROLE luser WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN;






--
-- Database creation
--

CREATE DATABASE regressbkuptest1 WITH TEMPLATE = template0 OWNER = __USER_LOGIN__ ENCODING = 'UTF8';
CREATE DATABASE regression WITH TEMPLATE = template0 OWNER = __USER_LOGIN__ ENCODING = 'SQL_ASCII';
ALTER DATABASE regression SET lc_messages TO 'C';
ALTER DATABASE regression SET lc_monetary TO 'C';
ALTER DATABASE regression SET lc_numeric TO 'C';
ALTER DATABASE regression SET lc_time TO 'C';
ALTER DATABASE regression SET timezone_abbreviations TO 'Default';
CREATE DATABASE regressrestoretestadv3 WITH TEMPLATE = template0 OWNER = __USER_LOGIN__ ENCODING = 'UTF8';
REVOKE ALL ON DATABASE template1 FROM PUBLIC;
REVOKE ALL ON DATABASE template1 FROM __USER_LOGIN__;
GRANT ALL ON DATABASE template1 TO __USER_LOGIN__;
GRANT CONNECT ON DATABASE template1 TO PUBLIC;


\connect postgres

--
-- Greenplum Database database dump
--

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: public; Type: ACL; Schema: -; Owner: __USER_LOGIN__
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Greenplum Database database dump complete
--

\connect regressbkuptest1

--
-- Greenplum Database database dump
--

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: s6; Type: SCHEMA; Schema: -; Owner: __USER_LOGIN__
--

CREATE SCHEMA s6;


ALTER SCHEMA s6 OWNER TO __USER_LOGIN__;

SET search_path = public, pg_catalog;

--
-- Name: complex; Type: TYPE; Schema: public; Owner: __USER_LOGIN__
--

CREATE TYPE complex AS (
	r real,
	i real
);


ALTER TYPE public.complex OWNER TO __USER_LOGIN__;

--
-- Name: comptype; Type: TYPE; Schema: public; Owner: __USER_LOGIN__
--

CREATE TYPE comptype AS (
	name text,
	price numeric
);


ALTER TYPE public.comptype OWNER TO __USER_LOGIN__;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: t1; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t1 (
    i integer,
    si smallint,
    bi bigint,
    de numeric,
    n numeric,
    n103 numeric(10,3),
    r real,
    dou double precision
) distributed by (i);


ALTER TABLE public.t1 OWNER TO __USER_LOGIN__;

--
-- Name: t10; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t10 (
    j integer
) distributed by (j);


ALTER TABLE public.t10 OWNER TO __USER_LOGIN__;

--
-- Name: t2; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t2 (
    i integer,
    s integer NOT NULL,
    bs bigint NOT NULL
) distributed by (i);


ALTER TABLE public.t2 OWNER TO __USER_LOGIN__;

--
-- Name: t2_bs_seq; Type: SEQUENCE; Schema: public; Owner: __USER_LOGIN__
--

CREATE SEQUENCE t2_bs_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.t2_bs_seq OWNER TO __USER_LOGIN__;

--
-- Name: t2_bs_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: __USER_LOGIN__
--

ALTER SEQUENCE t2_bs_seq OWNED BY t2.bs;


--
-- Name: t2_bs_seq; Type: SEQUENCE SET; Schema: public; Owner: __USER_LOGIN__
--

SELECT pg_catalog.setval('t2_bs_seq', 4, true);


--
-- Name: t2_s_seq; Type: SEQUENCE; Schema: public; Owner: __USER_LOGIN__
--

CREATE SEQUENCE t2_s_seq
    INCREMENT BY 1
    NO MAXVALUE
    NO MINVALUE
    CACHE 1;


ALTER TABLE public.t2_s_seq OWNER TO __USER_LOGIN__;

--
-- Name: t2_s_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: __USER_LOGIN__
--

ALTER SEQUENCE t2_s_seq OWNED BY t2.s;


--
-- Name: t2_s_seq; Type: SEQUENCE SET; Schema: public; Owner: __USER_LOGIN__
--

SELECT pg_catalog.setval('t2_s_seq', 4, true);


--
-- Name: t3; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t3 (
    m money,
    c character(10),
    vc character varying(10),
    t text,
    ba bytea
) distributed by (m);


ALTER TABLE public.t3 OWNER TO __USER_LOGIN__;

--
-- Name: t4; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t4 (
    t timestamp without time zone,
    t2 timestamp(2) without time zone,
    tz timestamp with time zone,
    tz3 timestamp(3) with time zone,
    i interval,
    d date,
    ti time without time zone,
    ti4 time(4) without time zone,
    tiz time with time zone,
    tiz5 time(5) with time zone
) distributed by (t);


ALTER TABLE public.t4 OWNER TO __USER_LOGIN__;

--
-- Name: t5; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t5 (
    b boolean,
    pt point,
    ls lseg,
    p path,
    bo box,
    po polygon,
    c circle
) distributed by (b);


ALTER TABLE public.t5 OWNER TO __USER_LOGIN__;

--
-- Name: t7; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t7 (
    b bit(3),
    bv bit varying(5),
    ia integer[],
    ta text[]
) distributed by (b);


ALTER TABLE public.t7 OWNER TO __USER_LOGIN__;

--
-- Name: t8; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t8 (
    i integer,
    c complex,
    ct comptype
) distributed by (i);


ALTER TABLE public.t8 OWNER TO __USER_LOGIN__;

SET default_with_oids = true;

--
-- Name: t9; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t9 (
    i integer
) distributed by (i);


ALTER TABLE public.t9 OWNER TO __USER_LOGIN__;

SET search_path = s6, pg_catalog;

SET default_with_oids = false;

--
-- Name: t6; Type: TABLE; Schema: s6; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t6 (
    c cidr,
    i inet,
    m macaddr
) distributed by (c);


ALTER TABLE s6.t6 OWNER TO __USER_LOGIN__;

SET search_path = public, pg_catalog;

--
-- Name: s; Type: DEFAULT; Schema: public; Owner: __USER_LOGIN__
--

ALTER TABLE t2 ALTER COLUMN s SET DEFAULT nextval('t2_s_seq'::regclass);


--
-- Name: bs; Type: DEFAULT; Schema: public; Owner: __USER_LOGIN__
--

ALTER TABLE t2 ALTER COLUMN bs SET DEFAULT nextval('t2_bs_seq'::regclass);


--
-- Data for Name: t1; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY t1 (i, si, bi, de, n, n103, r, dou) FROM stdin;
1	2	3	3.14	3.1415	3.142	2.71	2.71828
2	2	2	2.0	2.0	2.000	Infinity	NaN
\N	\N	\N	\N	\N	\N	\N	\N
-3	-2	-1	1.4	1.41	1.414	NaN	-Infinity
\.


--
-- Data for Name: t10; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY t10 (j) FROM stdin;
3
4
\N
\.


--
-- Data for Name: t2; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY t2 (i, s, bs) FROM stdin;
1	1	1
2	2	2
3	3	3
4	4	4
1	1	1
4	4	4
\.


--
-- Data for Name: t3; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY t3 (m, c, vc, t, ba) FROM stdin;
$10.20	Simple    	Simple VC	Text column	string as ba
-$3.00	1234567890	1234567890	Too long to test filling	\\001\\000\\000\\002\\\\
$10.00	It's OK   	It's OK	It's still OK	It's binary OK
$100.00	\t\r\nv\\     	\t\r\nv\\	\t\r\nv\\	\\011\\015\\012v
$100.00	          			
\N	\N	\N	\N	\N
\.


--
-- Data for Name: t4; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY t4 (t, t2, tz, tz3, i, d, ti, ti4, tiz, tiz5) FROM stdin;
1970-01-01 00:00:00	infinity	infinity	-infinity	00:00:00	1970-01-01	00:00:00	00:00:00	00:00:00+00	00:00:00+00
1999-01-08 04:05:06	1999-01-08 04:05:06.23	1999-01-07 18:05:06-08	1999-01-08 04:05:06.23-08	1 day 12:34:56	1999-01-08	04:05:06	00:00:00	00:01:02-08	00:01:00-02
\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
\.


--
-- Data for Name: t5; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY t5 (b, pt, ls, p, bo, po, c) FROM stdin;
t	(1,2)	[(1,2),(0,0)]	((1,1),(2,2),(3,3))	(2,2),(1,1)	((1,0),(1,1),(2,2))	<(0,1),4>
f	(1,2)	[(1,2),(0,0)]	((1,1),(2,2),(3,3),(4,4))	(2,2),(1,1)	((1,0),(1,1),(2,2))	<(0,2),43>
\N	\N	\N	\N	\N	\N	\N
\.


--
-- Data for Name: t7; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY t7 (b, bv, ia, ta) FROM stdin;
\N	\N	\N	\N
101	00101	{1,2,3}	{{Hello,world},{from,Mars}}
000	00	{4,5}	{{"",""},{"",""}}
111		{}	{{1,2},{3,4},{5,6}}
\.


--
-- Data for Name: t8; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY t8 (i, c, ct) FROM stdin;
1	(1,2)	(Hello,8.3)
2	(,-1)	(,)
1	(0,0)	("",)
\N	\N	\N
\.


--
-- Data for Name: t9; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY t9 (i) FROM stdin;
1
2
\N
\.


SET search_path = s6, pg_catalog;

--
-- Data for Name: t6; Type: TABLE DATA; Schema: s6; Owner: __USER_LOGIN__
--

COPY t6 (c, i, m) FROM stdin;
\N	\N	\N
127.0.0.1/32	2001:4f8:3:ba::/64	08:02:0b:02:ac:e3
\.


--
-- Name: public; Type: ACL; Schema: -; Owner: __USER_LOGIN__
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Greenplum Database database dump complete
--

\connect regression

--
-- Greenplum Database database dump
--

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: __USER_LOGIN__
--

CREATE PROCEDURAL LANGUAGE plpgsql;


--
-- Name: public; Type: ACL; Schema: -; Owner: __USER_LOGIN__
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Greenplum Database database dump complete
--

\connect regressrestoretestadv3

--
-- Greenplum Database database dump
--

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: plpgsql; Type: PROCEDURAL LANGUAGE; Schema: -; Owner: __USER_LOGIN__
--

CREATE PROCEDURAL LANGUAGE plpgsql;


SET search_path = public, pg_catalog;

--
-- Name: us_postal_code; Type: DOMAIN; Schema: public; Owner: __USER_LOGIN__
--

CREATE DOMAIN us_postal_code AS text
	CONSTRAINT us_postal_code_check CHECK (((VALUE ~ '^\\d{5}$'::text) OR (VALUE ~ '^\\d{5}-\\d{4}$'::text)));


ALTER DOMAIN public.us_postal_code OWNER TO __USER_LOGIN__;

--
-- Name: c3tobit(character); Type: FUNCTION; Schema: public; Owner: __USER_LOGIN__
--

CREATE FUNCTION c3tobit(s character) RETURNS bit
    AS $$ select '101'::bit(3); $$
    LANGUAGE sql IMMUTABLE STRICT;


ALTER FUNCTION public.c3tobit(s character) OWNER TO __USER_LOGIN__;

--
-- Name: incr(integer); Type: FUNCTION; Schema: public; Owner: __USER_LOGIN__
--

CREATE FUNCTION incr(i integer) RETURNS integer
    AS $$
	BEGIN 
		return i + 1;
	END
$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.incr(i integer) OWNER TO __USER_LOGIN__;

--
-- Name: trigf(); Type: FUNCTION; Schema: public; Owner: __USER_LOGIN__
--

CREATE FUNCTION trigf() RETURNS "trigger"
    AS $$
	BEGIN
		insert into trig1 values (1, 1);
	END
	$$
    LANGUAGE plpgsql;


ALTER FUNCTION public.trigf() OWNER TO __USER_LOGIN__;

SET search_path = pg_catalog;

--
-- Name: CAST (character AS bit); Type: CAST; Schema: pg_catalog; Owner: 
--

CREATE CAST (character AS bit) WITH FUNCTION public.c3tobit(character);


SET search_path = public, pg_catalog;

SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: idxt; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE idxt (
    i integer,
    j integer
) distributed by (j);


ALTER TABLE public.idxt OWNER TO __USER_LOGIN__;

SET default_with_oids = true;

--
-- Name: oidt; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE oidt (
    i integer,
    j integer
) distributed by (i);


ALTER TABLE public.oidt OWNER TO __USER_LOGIN__;

SET default_with_oids = false;

--
-- Name: rt; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE rt (
    i integer,
    j integer
) distributed by (i);


ALTER TABLE public.rt OWNER TO __USER_LOGIN__;

--
-- Name: seq; Type: SEQUENCE; Schema: public; Owner: __USER_LOGIN__
--

CREATE SEQUENCE seq
    INCREMENT BY 10
    NO MAXVALUE
    MINVALUE 100
    CACHE 10;


ALTER TABLE public.seq OWNER TO __USER_LOGIN__;

--
-- Name: seq; Type: SEQUENCE SET; Schema: public; Owner: __USER_LOGIN__
--

SELECT pg_catalog.setval('seq', 190, true);


--
-- Name: t1; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE t1 (
    i integer NOT NULL,
    j integer NOT NULL,
    k integer,
    CONSTRAINT t1_check CHECK ((j >= i))
) distributed by (i);


ALTER TABLE public.t1 OWNER TO __USER_LOGIN__;

--
-- Name: trig1; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE trig1 (
    i integer,
    j integer
) distributed by (i);


ALTER TABLE public.trig1 OWNER TO __USER_LOGIN__;

--
-- Name: tt1; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE tt1 (
    i integer,
    j integer,
    upc us_postal_code
) distributed by (i);


ALTER TABLE public.tt1 OWNER TO __USER_LOGIN__;

--
-- Name: tt2; Type: TABLE; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE TABLE tt2 (
    state character(2)
)
INHERITS (tt1) distributed by (i);


ALTER TABLE public.tt2 OWNER TO __USER_LOGIN__;

--
-- Name: v1; Type: VIEW; Schema: public; Owner: __USER_LOGIN__
--

CREATE VIEW v1 AS
    SELECT t1.i, t1.j, t1.k FROM t1 WHERE (t1.i = t1.j);


ALTER TABLE public.v1 OWNER TO __USER_LOGIN__;

--
-- Data for Name: idxt; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY idxt (i, j) FROM stdin;
\.


--
-- Data for Name: oidt; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY oidt (i, j) FROM stdin;
1	2
3	4
\.


--
-- Data for Name: rt; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY rt (i, j) FROM stdin;
1	1
\.


--
-- Data for Name: t1; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY t1 (i, j, k) FROM stdin;
1	1	1
2	2	2
3	4	\N
\.


--
-- Data for Name: trig1; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY trig1 (i, j) FROM stdin;
1	1
2	2
\.


--
-- Data for Name: tt1; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY tt1 (i, j, upc) FROM stdin;
1	1	53706
2	1	90210
3	1	55555-4444
\.


--
-- Data for Name: tt2; Type: TABLE DATA; Schema: public; Owner: __USER_LOGIN__
--

COPY tt2 (i, j, upc, state) FROM stdin;
4	4	94041	CA
\.


--
-- Name: t1_pkey; Type: CONSTRAINT; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

ALTER TABLE ONLY t1
    ADD CONSTRAINT t1_pkey PRIMARY KEY (i);


--
-- Name: idxt1; Type: INDEX; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE INDEX idxt1 ON idxt USING btree (i);


--
-- Name: idxt2; Type: INDEX; Schema: public; Owner: __USER_LOGIN__; Tablespace: 
--

CREATE UNIQUE INDEX idxt2 ON idxt USING btree (j);


--
-- Name: insrt; Type: RULE; Schema: public; Owner: __USER_LOGIN__
--

CREATE RULE insrt AS ON INSERT TO rt DO INSTEAD UPDATE rt SET j = (rt.i + rt.j);


--
-- Name: nodelrt; Type: RULE; Schema: public; Owner: __USER_LOGIN__
--

CREATE RULE nodelrt AS ON DELETE TO rt DO INSTEAD NOTHING;


--
-- Name: trig; Type: TRIGGER; Schema: public; Owner: __USER_LOGIN__
--

CREATE TRIGGER trig
    AFTER DELETE ON trig1
    FOR EACH ROW
    EXECUTE PROCEDURE trigf();


--
-- Name: public; Type: ACL; Schema: -; Owner: __USER_LOGIN__
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Greenplum Database database dump complete
--

\connect template1

--
-- Greenplum Database database dump
--

SET client_encoding = 'SQL_ASCII';
SET standard_conforming_strings = off;
SET check_function_bodies = false;
SET client_min_messages = warning;
SET escape_string_warning = off;

--
-- Name: template1; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON DATABASE template1 IS 'Default template database';


--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: __USER_LOGIN__
--

COMMENT ON SCHEMA public IS 'Standard public schema';


--
-- Name: public; Type: ACL; Schema: -; Owner: __USER_LOGIN__
--

REVOKE ALL ON SCHEMA public FROM PUBLIC;
REVOKE ALL ON SCHEMA public FROM __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO __USER_LOGIN__;
GRANT ALL ON SCHEMA public TO PUBLIC;


--
-- Greenplum Database database dump complete
--

--
-- Greenplum Database cluster dump complete
--

