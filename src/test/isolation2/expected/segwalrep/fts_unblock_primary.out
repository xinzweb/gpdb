-- This test assumes 3 primaries and 3 mirrors from a gpdemo segwalrep cluster

-- function to wait for mirror to come up in sync (1 minute timeout)
create or replace function wait_for_streaming(contentid smallint) returns void as $$ declare updated bool; /* in func */ begin /* in func */ for i in 1 .. 120 loop /* in func */ perform gp_request_fts_probe_scan(); /* in func */ select (mode = 's' and status = 'u') into updated /* in func */ from gp_segment_configuration /* in func */ where content = contentid and role = 'm'; /* in func */ exit when updated; /* in func */ perform pg_sleep(0.5); /* in func */ end loop; /* in func */ end; /* in func */ $$ language plpgsql;
CREATE

-- start_ignore
create language plpythonu;
CREATE
-- end_ignore

create or replace function pg_ctl(datadir text, command text, port int, contentid int) returns text as $$ import subprocess 
cmd = 'pg_ctl -D %s ' % datadir if command in ('stop', 'restart'): cmd = cmd + '-w -m immediate %s' % command elif command == 'start': opts = '-p %d -\-gp_dbid=0 -\-silent-mode=true -i -M mirrorless -\-gp_contentid=%d -\-gp_num_contents_in_cluster=3' % (port, contentid) cmd = cmd + '-o "%s" start' % opts elif command == 'reload': cmd = cmd + 'reload' else: return 'Invalid command input' 
return subprocess.check_output(cmd, stderr=subprocess.STDOUT, shell=True).replace('.', '') $$ language plpythonu;
CREATE

-- make sure we are in-sync for the primary we will be testing with
select content, role, preferred_role, mode, status from gp_segment_configuration where content=2;
content|role|preferred_role|mode|status
-------+----+--------------+----+------
2      |p   |p             |s   |u     
2      |m   |m             |s   |u     
(2 rows)

-- synchronous_standby_names should be set to '*' by default on primary 2, since
-- we have a working/sync'd mirror
2U: show synchronous_standby_names;
synchronous_standby_names
-------------------------
*                        
(1 row)

-- create table and show commits are not blocked
create table fts_unblock_primary (a int) distributed by (a);
CREATE
insert into fts_unblock_primary values (1);
INSERT 1

-- turn off fts
! gpconfig -c gp_fts_probe_pause -v true --masteronly --skipvalidation;
completed successfully with parameters '-c gp_fts_probe_pause -v true --masteronly --skipvalidation'

-1U: select pg_ctl((select datadir from gp_segment_configuration c where c.role='p' and c.content=-1), 'reload', NULL, NULL);
pg_ctl          
----------------
server signaled

(1 row)

-- stop a mirror
-1U: select pg_ctl((select datadir from gp_segment_configuration c where c.role='m' and c.content=2), 'stop', NULL, NULL);
pg_ctl                                              
----------------------------------------------------
waiting for server to shut down done
server stopped

(1 row)

-- this should block since mirror is not up and sync replication is on
2: begin;
BEGIN
2: insert into fts_unblock_primary values (1);
INSERT 1
2&: commit;  <waiting ...>

-- this should not block due to direct dispatch to primary with active synced mirror
insert into fts_unblock_primary values (3);
INSERT 1

-- turn on fts
! gpconfig -c gp_fts_probe_pause -v false --masteronly --skipvalidation;
completed successfully with parameters '-c gp_fts_probe_pause -v false --masteronly --skipvalidation'

-1U: select pg_ctl((select datadir from gp_segment_configuration c where c.role='p' and c.content=-1), 'reload', NULL, NULL);
pg_ctl          
----------------
server signaled

(1 row)

--trigger fts probe and check to see primary marked n/u and mirror n/d
select gp_request_fts_probe_scan();
gp_request_fts_probe_scan
-------------------------
t                        
(1 row)
select content, role, preferred_role, mode, status from gp_segment_configuration where content=2;
content|role|preferred_role|mode|status
-------+----+--------------+----+------
2      |p   |p             |n   |u     
2      |m   |m             |n   |d     
(2 rows)

-- should unblock and commit after FTS sent primary a SyncRepOff libpq message
2<:  <... completed>
COMMIT

-- synchronous_standby_names should now be empty on the primary
2U: show synchronous_standby_names;
synchronous_standby_names
-------------------------
                         
(1 row)

-- bring the mirror back up and see primary s/u and mirror s/u
-1U: select pg_ctl((select datadir from gp_segment_configuration c where c.role='m' and c.content=2), 'start', (select port from gp_segment_configuration where content = 2 and preferred_role = 'm'), 2);
pg_ctl          
----------------
server starting

(1 row)
select wait_for_streaming(2::smallint);
wait_for_streaming
------------------
                  
(1 row)
select content, role, preferred_role, mode, status from gp_segment_configuration where content=2;
content|role|preferred_role|mode|status
-------+----+--------------+----+------
2      |p   |p             |s   |u     
2      |m   |m             |s   |u     
(2 rows)

-- everything is back to normal
insert into fts_unblock_primary select i from generate_series(1,10)i;
INSERT 10

-- synchronous_standby_names should be back to its original value on the primary
2U: show synchronous_standby_names;
synchronous_standby_names
-------------------------
*                        
(1 row)
